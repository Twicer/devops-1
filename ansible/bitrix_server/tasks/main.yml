# tasks file for bitrix_server
---
- name: Install Epel-release
  yum:
    name: epel-release
    state: present
- name: Install PIP
  yum:
    name: python2-pip.noarch
    state: present
- name: Install latest pyOpenSSL
  pip:
    name: pyOpenSSL
    state: latest
- name: Install NGINX
  yum:
    name: nginx
    state: present
  register: nginxinstalled
- name: Remove original NGINX configs
  file:
    path: /etc/nginx
    state: absent
  when: nginxinstalled.changed
- name: Copy NGINX configs
  copy:
    src: files/nginx
    dest: /etc/
    owner: root
    group: root
    mode: '0700'
- name: Copy templates for NGINX
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: root
    group: root
    mode: 640
    force: yes
  with_items:
    - { src: "templates/nginx/bx/site_enabled/s1.conf", dest: "{{ nginx_sites }}s1.conf" }
    - { src: "templates/nginx/bx/settings/rtc-im_settings.conf", dest: "/etc/nginx/bx/settings/rtc-im_settings.conf"}
- name: Generate DH Parameters with a size 2048 bits
  openssl_dhparam:
    path: /etc/nginx/ssl/dhparam.pem
    size: 2048
- name: Generate an OpenSSL private key with a size 2048 bits
  openssl_privatekey:
    path: /etc/nginx/ssl/cert.key
    size: 2048
- name: Generate an OpenSSL Certificate Signing Request
  openssl_csr:
    path: /etc/nginx/ssl/cert.csr
    privatekey_path: /etc/nginx/ssl/cert.key
    common_name: "{{ ansible_facts['nodename'] }}"
- name: Generate a Self Signed OpenSSL certificate
  openssl_certificate:
    path: /etc/nginx/ssl/cert.crt
    privatekey_path: /etc/nginx/ssl/cert.key
    csr_path: /etc/nginx/ssl/cert.csr
    provider: selfsigned
- name: Install HTTPD
  yum:
    name: httpd
    state: present
  register: httpdinstalled
- name: Create destination directory
  file:
    dest: /var/www/{{ ansible_facts['nodename'] }}
    state: directory
    owner: apache
    group: apache
    mode: 0770
- name: Remove original HTTPD configs
  file:
    path: /etc/httpd
    state: absent
  when: httpdinstalled.changed
- name: Copy HTTPD configs
  copy:
    src: files/httpd
    dest: /etc/
    owner: root
    group: root
    mode: '0700'
- name: Copy templates for HTTPD
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: root
    group: root
    mode: 640
    force: yes
  with_items:
    - { src: "templates/httpd/bx/conf/default.conf", dest: "/etc/httpd/bx/conf/default.conf"}
    - { src: "templates/httpd/conf/httpd.conf", dest: "/etc/httpd/conf/httpd.conf" }
- name: Start Firewalld Service
  service:
    name: firewalld
    state: started
    enabled: no
- name: Settings for firewalld
  firewalld:
    port: "{{ item }}"
    permanent: yes
    state: enabled
    immediate: yes
  with_items:
    - 80/tcp
    - 443/tcp
    - 8893/tcp
    - 8894/tcp
    - 8895/tcp
- name: Create MariaDB repo
  yum_repository:
    name: mariadb
    description: MariaDB repo
    baseurl: "{{ mariadb_repo }}"
    gpgkey: "{{ mariadb_gpgkey }}"
    gpgcheck: yes
    enabled: yes
- name: Install MariaDB packages
  yum:
    name: "{{ mariadb_packages }}"
    state: present
- name: Copy MariaDB config
  copy:
    src: files/mysql.conf
    dest: /etc/my.cnf.d/for_bitrix.cnf
    owner: root
    group: root
    mode: '0644'
    backup: yes
- name: Start and enable MariaDB Service
  service:
    name: "{{ mariadb_service }}"
    state: started
    enabled: yes
- name: Remove Anonymous users
  mysql_user:
    name: ''
    host_all: yes
    state: absent
- name: Remove the test Database
  mysql_db:
    name: test
    state: absent
- name: Create mariadb_user with name {{ mariadb_user }} and password {{ mariadb_user_pass }} with all privileges on {{ mariadb_db }}
  mysql_user:
    name: "{{ mariadb_user }}"
    password: "{{ mariadb_user_pass }}"
    priv: "{{ mariadb_db }}.*:ALL"
    host: localhost
    state: present
- name: Create the database with name {{ mariadb_db }}
  mysql_db:
    name: "{{ mariadb_db }}"
    state: present
- name: Install Remi repo.
  yum:
    name: http://rpms.famillecollet.com/enterprise/remi-release-{{ ansible_facts['distribution_major_version'] }}.rpm
    state: present
- name: Import Remi GPG key.
  rpm_key:
    key: http://rpms.remirepo.net/RPM-GPG-KEY-remi
    state: present
- name: Install PHP
  yum:
    name: "{{ php_packages }}"
    state: present
- name: Enable HugePages for Zend Opcache
  sysctl:
    name: vm.nr_hugepages
    value: '32'
    sysctl_set: yes
    state: present
    reload: yes
- name: Copy php.ini config
  copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: root
    group: root
    mode: '0644'
    backup: yes
  with_items:
    - { src: 'files/php.ini', dest: "/etc/opt/remi/php{{ php_version }}/php.ini" }
    - { src: 'files/10-opcache.ini', dest: "/etc/opt/remi/php{{ php_version }}/php.d/10-opcache.ini" }
- name: Copy bitrixsetup.php and .htaccess
  copy:
    src: "{{ item }}"
    dest: /var/www/{{ ansible_facts['nodename'] }}/
    owner: apache
    group: apache
    mode: 0640
    force: yes
  with_items:
    - files/bitrixsetup.php
    - files/.htaccess
- name: Adding bitrix repo for Push-server
  copy:
    src: files/bitrix.repo
    dest: /etc/yum.repos.d/
    owner: root
    group: root
    mode: '0644'
- name: Install Push-server
  yum:
    name: "{{ item }}"
    state: present
  with_items:
  - nodejs
  - push-server
  - http-parser
  register: pushinstalled
- name: Adding user redis to group apache
  user:
    name: redis
    group: apache
- name: Copy files for Push-server
  copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: root
    group: root
    mode: '0644'
    backup: "{{ item.bckp }}"
  with_items:
    - { src: 'files/redis.conf', dest: '/etc/', bckp: 'yes' }
    - { src: 'files/systemd_redis_custom.conf', dest: '/etc/systemd/system/redis.service.d/custom.conf', bckp: 'no' }
- name: Change settings of Push-server
  lineinfile:
    path: /etc/sysconfig/push-server-multi
    regexp: "{{ item.src }}"
    line: "{{ item.dest }}"
  with_items:
    - { src: '^ID_SUB', dest: 'ID_SUB=1' }
    - { src: '^ID_PUB', dest: 'ID_PUB=1' }
    - { src: '^USER', dest: 'USER=apache' }
  when: pushinstalled.changed
- name: Change settings of Push-server 2
  lineinfile:
    path: /etc/sysconfig/push-server-multi
    line: "WS_HOST={{ ansible_facts['default_ipv4']['address'] }}"
  when: pushinstalled.changed
- name: Execute the command "push-server-multi reset" only when push-server was installed
  shell: /etc/init.d/push-server-multi reset
  when: pushinstalled.changed
- name: Editing /etc/hosts
  lineinfile:
    path: /etc/hosts
    regexp: "{{ ansible_facts['nodename'] }}"
    line: "{{ ansible_facts['default_ipv4']['address'] }} {{ ansible_facts['nodename'] }}"
- name: install additional software
  yum:
    name: "{{ additional_packages }}"
    state: present
    disablerepo: bitrix
- name: Start and enable Redis Service
  service:
    name: redis
    state: started
    enabled: yes
- name: Start and enable HTTPD
  service:
    name: httpd
    state: started
    enabled: yes
- name: Start and enable NGINX
  service:
    name: nginx
    state: started
    enabled: yes
- name: Start and enable PHP-FPM Service
  service:
    name: "{{ php_fpm_service }}"
    state: started
    enabled: yes
- name: Start push-server-multi Service
  service:
    name: push-server-multi
    state: started
